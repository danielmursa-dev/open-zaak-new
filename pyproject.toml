[project]
requires-python = "== 3.12"

[tool.uv.pip]
emit-index-url = false

[tool.ruff.lint]
select = [
    # https://docs.astral.sh/ruff/rules/#isort-i
    "I",
    # https://docs.astral.sh/ruff/rules/#error-e
    "E",
    # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "F",
    # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "SIM",
    # https://docs.astral.sh/ruff/rules/#perflint-perf
    "PERF",
    # https://docs.astral.sh/ruff/rules/#refurb-furb
    "FURB",
    # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "B006",
    "B010",
    # https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "N",
    "TID251",# tidy-imports
    "TID253",
]

ignore = [
    # Checks for assertRaises and pytest.raises context managers that catch Exception or BaseException.
    "B017",
    # Checks for useless expressions.
    "B018",
    # Checks for raise statements in exception handlers that lack a from clause.
    "B904",
    # Whitespace before ':' (conflicts with Black)
    "E203",
    # Checks for lines that exceed the specified maximum character length.
    "E501",
    # Do not assign a lambda expression
    "E731",
    # Name may be undefined from '*' import
    "F405",
    # Checks for CamelCase imports that are aliased to lowercase names
    "N813",
    # Checks for CamelCase imports that are aliased to constant-style names.
    "N814",
    # Checks for class variable names that follow the mixedCase convention
    "N815",
    # Exception name should be named with Error suffix
    "N818",
    # Checks for instance methods that use a name other than self for their first argument.
    "N805",
    # Checks for the use of non-lowercase variable names in functions
    "N806",
    # Checks for functions names that do not follow the snake_case naming convention.
    "N802",
    # Checks for module names that do not follow the snake_case naming convention or are otherwise invalid.
    "N999",
    # Checks for for loops that can be replaced by a list comprehension.
    "PERF401",
    # Checks for `if` statements that can be replaced with bool
    "SIM103",
    # Check for if-else-blocks that can be replaced with a ternary operator
    "SIM108",
    #Check for environment variables that are not capitalized.
    "SIM112",
    # Checks for nested if statements that can be collapsed into a single if statement
    "SIM102",
    # Use a single `with` statement with multiple contexts instead of nested `with` statements
    "SIM117",
]


[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = false
known-first-party = ["openzaak_new"]
lines-after-imports = -1
relative-imports-order = "furthest-to-closest"
sections = { django = ["django"] }
section-order = [
    "future",
    "standard-library",
    "django",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.bumpversion]
current_version = "0.1.0"
parse = """(?x)
    (?P<major>0|[1-9]\\d*)\\.
    (?P<minor>0|[1-9]\\d*)\\.
    (?P<patch>0|[1-9]\\d*)
    (?:
        -                             # dash separator for pre-release section
        (?P<pre_l>[a-zA-Z-]+)\\.      # pre-release label
        (?P<pre_n>0|[1-9]\\d*)        # pre-release version number
    )?                                # pre-release section is optional
"""
serialize = [
    "{major}.{minor}.{patch}-{pre_l}.{pre_n}",
    "{major}.{minor}.{patch}",
]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = false
sign_tags = false
tag_name = "{new_version}"
tag_message = ":arrow_up: Bump version to {new_version} and update changelog"
allow_dirty = false
commit = false
message = ":arrow_up: Bump version to {new_version} and update changelog"
commit_args = ""
setup_hooks = []
pre_commit_hooks = [
    "npm i",  # ensure that package-lock.json is updated
]
post_commit_hooks = []

[tool.bumpversion.parts.pre_l]
values = ["dev", "beta", "rc", "final"]
optional_value = "final"

[[tool.bumpversion.files]]
filename = "src/{{ project_name|lower }}/__init__.py"

[[tool.bumpversion.files]]
filename = "src/{{ project_name|lower }}/conf/locale/nl/LC_MESSAGES/django.po"

[[tool.bumpversion.files]]
filename = "README.rst"
search = ":Version: {current_version}"
replace = ":Version: {new_version}"

[[tool.bumpversion.files]]
filename = "package.json"
search = "    \"version\": \"{current_version}\""
replace = "    \"version\": \"{new_version}\""
